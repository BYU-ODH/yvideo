# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home/basic pages
GET     /home                                               controllers.Application.home
GET     /login                                              controllers.Application.login
GET     /                                                   controllers.Application.login

# Authentication
GET     /auth/cas                                           controllers.authentication.Cas.login(action: String = "login", path: String = "")
GET     /auth/cas/redirect*path                             controllers.authentication.Cas.login(action: String = "login", path: String)
GET     /auth/cas/merge                                     controllers.authentication.Cas.login(action: String = "merge", path: String = "")
GET     /auth/cas/callback/:action                          controllers.authentication.Cas.callback(action: String, path: String = "")
GET     /auth/cas/callback/:action/redirect*path            controllers.authentication.Cas.callback(action: String, path: String)
GET     /auth/logout                                        controllers.authentication.Authentication.logout
GET     /auth/logout/redirect*path                          controllers.authentication.Authentication.logoutWithService(path: String)

# Collection pages
GET     /collection/create                                  controllers.Collections.createPage
POST    /collection/create                                  controllers.Collections.create
POST    /collection/:id                                     controllers.Collections.edit(id: Long)
POST    /collection/:id/addContent                          controllers.Collections.addContent(id: Long)
POST    /collection/:id/removeContent                       controllers.Collections.removeContent(id: Long)
POST    /collection/:id/setPermission/:operation            controllers.Collections.setPermission(id: Long, operation: String)
POST    /collection/:id/addTA                               controllers.Collections.addTA(id: Long)
POST    /collection/:collectionId/removeTA                  controllers.Collections.removeTA(collectionId: Long)
POST    /collection/:collectionId/linkCourses               controllers.Collections.linkCourses(collectionId: Long)
POST    /collection/:collectionId/unlinkCourses             controllers.Collections.unlinkCourses(collectionId: Long)
POST    /collection/:collectionId/addException              controllers.Collections.addException(collectionId: Long)
POST    /collection/:collectionId/removeException           controllers.Collections.removeException(collectionId: Long)
GET     /collection/:collectionId/:action                   controllers.Collections.setFlag(collectionId: Long, action: String)

# Content pages
GET     /content/create/:page                               controllers.ContentController.createPage(page: String, collectionId: Long = 0)
GET     /content/create/:page/:collectionId                 controllers.ContentController.createPage(page: String, collectionId: Long)
POST    /content/create/url                                 controllers.ContentController.createFromUrl(collectionId: Long, annotations: Boolean)
POST    /content/create/batch                               controllers.ContentController.createFromBatch(collectionId: Long)
POST    /content/create/file                                controllers.ContentController.createFromFile(collectionId: Long)
POST    /content/create/resource                            controllers.ContentController.createFromResource(collectionId: Long)
POST    /content/create/playlist                            controllers.ContentController.createPlaylist(collectionId: Long)
GET     /content/:id                                        controllers.ContentController.view(id: Long)
POST    /content/:id/delete                                 controllers.ContentController.delete(id: Long)
POST    /content/:id/settings                               controllers.ContentEditing.setSettings(id: Long)
POST    /content/:id/metadata                               controllers.ContentEditing.setMetadata(id: Long)
POST    /content/:id/thumbnail                              controllers.ContentEditing.changeThumbnail(id: Long)
GET     /content/:id/edit                                   controllers.ContentEditing.editImage(id: Long)
POST    /content/:id/edit                                   controllers.ContentEditing.saveImageEdits(id: Long)
POST    /content/:id/makeThumb/:time                        controllers.ContentEditing.createThumbnail(id: Long, time: Double)
POST    /content/:id/source                                 controllers.ContentEditing.setMediaSource(id: Long)

# Playlist pages
GET     /playlist/:id/play                                  controllers.Playlists.view(id: Long)
GET     /playlist/:id                                       controllers.Playlists.about(id: Long)

# User pages
GET     /user/settings                                      controllers.Users.accountSettings
POST    /user/settings                                      controllers.Users.saveSettings
POST    /user/uploadPicture                                 controllers.Users.uploadProfilePicture

# Admin pages
GET     /admin/users/count                                  controllers.Administration.userCount
GET     /admin/users/:columnName/:searchValue               controllers.Administration.searchUsers(columnName: String, searchValue: String)
POST    /admin/users/setPermission/:operation               controllers.Administration.setPermission(operation: String)
POST    /admin/users/notify                                 controllers.Administration.sendNotification(currentPage: Int)
POST    /admin/users/:id/delete                             controllers.Administration.delete(id: Long)
POST    /admin/collections/:id                              controllers.Administration.editCollection(id: Long)
POST    /admin/collections/:id/delete                       controllers.Administration.deleteCollection(id: Long)
POST    /admin/settings                                     controllers.Administration.saveSiteSettings
GET     /admin/proxy/:id                                    controllers.Administration.proxy(id: Long)

# CaptionAider pages
GET     /captionaider/:id/:collectionId                     controllers.CaptionAider.view(id: Long, collectionId: Long)
POST    /captionaider/save                                  controllers.CaptionAider.save

# Annotation Editor pages
GET     /annotations/:id/                                   controllers.DocumentManager.editAnnotations(id: Long)
POST    /annotations/save                                   controllers.DocumentManager.saveAnnotations
POST    /annotations/saveEditedAnnotations                  controllers.DocumentManager.saveEditedAnnotations
POST    /content/:contentId/delete/:docId                   controllers.DocumentManager.deleteDocument(contentId: Long, docId: String)

# Word List pages
GET     /words                                              controllers.WordLists.view
GET     /wordList                                           controllers.WordLists.viewJson
POST    /words                                              controllers.WordLists.add
POST    /words/delete/:id                                   controllers.WordLists.deleteWord(id: Long)
POST    /words/export                                       controllers.WordLists.export
GET     /words/auth                                         controllers.WordLists.authorize
GET     /words/auth/callback                                controllers.WordLists.authorizeCallback

# Help pages
GET     /help                                               controllers.HelpPages.tableOfContents
GET     /help/:id                                           controllers.HelpPages.view(id: Long)
GET     /help/:id/edit                                      controllers.HelpPages.edit(id: Long)
POST    /help/:id/edit                                      controllers.HelpPages.save(id: Long)
POST    /help/:id/delete                                    controllers.HelpPages.delete(id: Long)

# Ajax utilities
POST    /scola                                              controllers.Scola.buildUrl
POST    /byusecure                                          controllers.BYUSecure.buildUrl
POST    /ajax/permissionChecker                             controllers.ajax.PermissionChecker.check
GET     /ajax/content/collection                            controllers.ajax.ContentLister.collection
GET     /ajax/content/:id                                   controllers.ajax.ContentLister.get(id: Long)

# Feedback
POST    /feedback                                           controllers.Application.saveFeedback
POST    /feedback/error                                     controllers.Application.saveErrorFeedback

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                       controllers.Assets.at(path="/public", file)

#################
# API Endpoints #
#################

# user API
GET     /api/user                                           controllers.Users.getAsJson
GET     /api/user/auth                                      controllers.Users.roles
GET     /api/user/collectionsPreview                        controllers.Users.collectionsPreview
GET     /api/user/recent                                    controllers.Users.recentContent

# content API
GET     /api/content/:id                                    controllers.ContentController.contentAsJson(id: Long)
GET     /api/content/:id/addview                            controllers.ContentController.addView(id: Long)

# collection API
GET     /api/collection/:id                                 controllers.Collections.collectionAsJson(id: Long)

# admin API
GET     /api/admin/users/count                              controllers.Administration.userCount
GET     /api/admin/users/:columnName/:searchValue           controllers.Administration.searchUsers(columnName: String, searchValue: String)

# wordlist API
GET     /wordList                                           controllers.WordLists.viewJson

